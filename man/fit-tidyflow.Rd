% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fit.R
\name{fit-tidyflow}
\alias{fit-tidyflow}
\alias{fit.tidyflow}
\title{Fit a tidyflow object}
\usage{
\method{fit}{tidyflow}(object, ..., control = control_tidyflow())
}
\arguments{
\item{object}{A tidyflow}

\item{...}{Not used}

\item{control}{A \code{\link[=control_tidyflow]{control_tidyflow()}} object}
}
\value{
The tidyflow \code{object}, updated with a fit parsnip model in the
\code{object$fit$fit} slot.
}
\description{
Fitting a tidyflow currently involves two main steps:
\itemize{
\item Preprocessing the data using a formula preprocessor, or by calling
\code{\link[recipes:prep]{recipes::prep()}} on a recipe.
\item Fitting the underlying parsnip model using \code{\link[parsnip:fit.model_spec]{parsnip::fit.model_spec()}}.
}
}
\details{
In the future, there will also be \emph{postprocessing} steps that can be added
after the model has been fit.
}
\examples{
library(parsnip)
library(recipes)

model <- linear_reg()
model <- set_engine(model, "lm")

formula_tidyflow <-
 mtcars \%>\%
 tidyflow() \%>\%
 add_formula(mpg ~ cyl + log(disp)) \%>\%
 add_model(model)

fit(formula_tidyflow)

recipe_tidyflow <-
 formula_tidyflow \%>\%
 drop_formula() \%>\% 
 add_recipe(~ recipe(mpg ~ cyl + disp, .x) \%>\% step_log(disp))

fit(recipe_tidyflow)

}
