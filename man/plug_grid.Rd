% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pre-action-grid.R
\name{plug_grid}
\alias{plug_grid}
\alias{drop_grid}
\alias{replace_grid}
\title{Add a grid specification to a tidyflow}
\usage{
plug_grid(x, .f, ...)

drop_grid(x)

replace_grid(x, .f, ...)
}
\arguments{
\item{x}{A tidyflow}

\item{.f}{A function which will be passed to the tuned arguments from the model
and recipe. There are two type of functions that can be used here. For
generating random grids, \code{.f} must return an object of class
\code{param_grid}. In particular, the user doesn't need to specified the
parameters in \code{...} since they can be extracted and passed directly to
the grid function. See package \code{\link[dials]{dials}} for all related
functions. The other type of function that can be used is \code{expand.grid}.
In particular, if \code{.f} is \code{`expand.grid`} all tuning arguments should be
specified in \code{...}. This does not support parameter objects like
\code{\link[dials]{mixture}} but rather the raw values to be expanded
by \code{expand.grid}. For example, instead of \code{mixture = dials::mixture()}
it should be \code{mixture = c(0, 0.5, 1)}. See the details section and
example section for a more thorough description.}

\item{...}{arguments passed to \code{.f}. The processing of \code{...}
respects the quotation rules from \code{.f}. In other words, if the function
allows variables as strings \strong{and} as names, the user can specify both.
See the example section.}
}
\value{
\code{x}, updated with either a new or removed grid specification.
}
\description{
\itemize{
\item \code{plug_grid()} specifies the type of grid used in the model tuning. It
accepts a function \code{.f} that will be fed the tuning parameters defined
in the model and the recipe. Only functions which return a \code{param_grid}
object will be allowed or \code{expand.grid}. See package
\code{\link[dials]{dials}} and the details/example section. If a model has
been fit before adding the grid, it will need to be refit.
\item \code{drop_grid()} removes the grid specification from the tidyflow. Note
that it keeps other preprocessing steps such as the recipe and model.
\item \code{replace_grid()} first removes the grid, then adds a new grid
specification. Any model that has already been fit based on this
split will need to be refit.
}
}
\details{
The grid specification is an optional step in the tidyflow. You can add
the data, prepare a recipe and fit the model without adding a grid
specification.

The tuning parameters defined in the model and recipe are extracted
and passed to \code{.f}. If \code{expand.grid} is specified in \code{.f},
the result of \code{.f} should be an object of class
\code{data.frame}. Moreover, all tuning parameters defined in the model and
recipe need to be specified in \code{...}. For example, instead of
specifying \code{mixture = mixture()} from \code{\link[dials]{mixture}},
you should specify the raw values used to expand: mixture = c(0, 0.5, 1).
This applies to all tuning parameters defined in the model and recipe.
However, if the \code{grid_*} functions from \code{\link[dials]{dials}}
are specified, the user only needs to specify the function in \code{.f} and
all tuning parameters are extracted automatically. In case where the user
wants to override some of these arguments, it can do so by specifying the
parameters in \code{...}. For example, limiting the range of mixture can be
specified as: \code{mixture = mixture(range = c(0, 0.5))}. The benefit of this
is that users need to specify only the arguments they are interested as all
other tuning parameters are automatically extracted and assigned sensible
values in \code{\link[dials]{dials}}. For more details see  the example
section.

If a tuning parameter in the model/recipe is assigned a name (that is,
\code{tune("new_name")}) and the user is interested in specifying
the tuning values for that parameter using \code{plug_grid} or
\code{replace_grid}, then the parameter name in \code{...} should have
the custom name. See the example section for a concrete
example.
}
\examples{

\dontrun{
library(parsnip)
library(rsample)
library(tune)
library(dials)
library(recipes)

# Grid search with tuning parameters in model
# No need to define the values of the tuning parameters
# as they have defaults. For example, see dials::penalty()
mod <-
  mtcars \%>\%
  tidyflow() \%>\%
  plug_split(initial_split) \%>\%
  plug_formula(mpg ~ .) \%>\% 
  plug_resample(vfold_cv) \%>\%
  plug_model(set_engine(linear_reg(penalty = tune(), mixture = tune()), "glmnet")) \%>\% 
  plug_grid(grid_regular)

res <- fit(mod)

res \%>\%
  pull_tflow_fit_tuning() \%>\%
  show_best("rsq")

# If you want to specify tuning values, you can do so with
# `plug_grid` or `replace_grid` but they must have the same
# name as the tuning parameter
res2 <-
  mod \%>\%
  replace_grid(grid_regular, penalty = penalty(c(-1, 0)), levels = 2) \%>\%
  fit()

res2 \%>\%
  pull_tflow_fit_tuning() \%>\%
  show_best("rsq")

# If tune assigns a name, then `plug_grid` or `replace_grid` must
# use that name to replace it
model <-
  set_engine(
    linear_reg(penalty = tune("my_penalty"), mixture = tune("my_mixture")),
    "glmnet"
  )

# You must use `my_penalty`
res3 <-
  mod \%>\%
  replace_model(model) \%>\%   
  replace_grid(grid_regular, my_penalty = penalty(c(-1, 0)), levels = 2) \%>\%
  fit()

res3 \%>\%
  pull_tflow_fit_tuning() \%>\%
  show_best("rsq")

# If you want to create all possible combination of grid values,
# you must use only `expand.grid` and `expand = TRUE`.
res4 <-
 mod \%>\%
 replace_grid(expand.grid,
              penalty = seq(0.01, 0.02, 0.005),
              mixture = c(0, 0.5, 1)) \%>\%
 fit()

# See how they values are not random, but rather
# all combination of the supplied values
res4 \%>\%
 pull_tflow_fit_tuning() \%>\%
 collect_metrics()

# You can also tune values from a recipe directly
res5 <-
  res3 \%>\%
  drop_formula() \%>\% 
  plug_recipe(~ recipe(mpg ~ ., data = .) \%>\% step_ns(hp, deg_free = tune())) \%>\%
  fit()

res5 \%>\%
  pull_tflow_fit_tuning() \%>\%
  show_best("rsq")
}

}
