pull_step_name()
pull_step_name
wflow %>% .fit_pre() %>% pull_workflow_mold()
wflow %>% .fit_pre() %>% pull_workflow_preprocessor()
wflow %>% .fit_pre() %>% add_split(initial_split)
wflow %>% .fit_pre() %>% add_split(initial_split) %>% pull_workflow_mold()
wflow %>% .fit_pre() %>% add_split(initial_split)
wflow %>% .fit_pre() %>% add_split(initial_split) %>% .fit_pre()
rlang::last_error()
wflow %>% add_split(initial_split) %>% .fit_pre()
exec(mean, list(x = 1:10))
exec(mean, !!!list(x = 1:10))
exec(mean, !!!list(x = c(1:10, NA)), na.rm = TRUE)
initial_split
wflow %>% add_split(initial_split) %>% .fit_pre()
wflow %>% add_split(initial_split) %>% .fit_pre()
wflow <- wflow %>% add_split(initial_split)
wflow
hardhat::mold(mpg ~ cyl, data = mtcars)
hardhat::mold(mpg ~ cyl, data = mtcars)
fit
fit.workflow
.fit_model
fit.action_model
fit
fit.workflow
.fit_model
fit.action_model
fit.action_recipe
hardhat:::mold.default
hardhat:::mold.data.frame
fit.action_model
fit_from_xy
fit_from_formula
fit_from_xy
fit
fit.action_model
fit_from_xy
fit_from_formula
fit.model_spec
fit_from_formula
workflows:::fit_from_formula
workflows:::fit_from_xy
workflows:::fit_from_xy
workflows:::fit_from_formula
workflow
traceback()
workflow$pre$actions
workflow$pre$mold
.fit_pre
wflow <- workflow
n
i <- 1
action
wflow <- workflow
n
i <- 1
workflow
workflow$pre
workflow$pre
workflow$pre$actions
length(workflow$pre$actions)
x <- list(b = 1:3)
x
x[c("a", "b")]
purrr::compact
workflow
workflow$pre$actions
.fit_pre
workflow
rlang::last_Error()
rlang::last_error()
initial_split
n
n <- 1
action
fit_action_split
fit.action_split
action
object <- action
workflow <- wflow
workflow$pre$mold
workflow
wflow
wflow
wflow <- workflow
wflow
rm(wflow)
getwd()
workflow
n <- 1
i <- 1
action
workflow$pre$mold
workflow
workflow$pre$mold
workflow$pre$mold
workflow$data
workflow
workflow %>% update_data(iris)
workflow <- workflow %>% update_data(iris)
workflow$data
workflow$pre$mold
workflow$pre$mold
    training(
      rlang::exec(
        # function body
        object[[1]],
        # function args
        data = workflow$pre$mold,
        !!!object[[2]]
      )
    )
workflow
workflow$data
workflow$pre$mold
workflow$pre$actions
n <- 1
action
wflow
wflow$pre$mold
wflow
wflow
wflow <- workflow
i <- 1
action
wflow
wflow$data
nrow(wflow$data)
nrow(wflow$fit)
nrow(wflow$pre)
wflow$pre
wflow$pre$mold
nrow(wflow$pre$mold)
n <- 2
action
i <- 2
action
wflow
wflow$pre$mold
lasttrace()
traceback()
rlang::last_error()
rlang::last_error()
workflow
getwd()
workflow <- object
object <- workflow
  workflow <- .fit_pre(workflow)
workflow
workflow$pre$mold
object <- workflow
object$pre$actions
fit.action_formula
  workflow <- .fit_pre(workflow)
rlang::last_error()
  workflow <- .fit_pre(workflow)
workflow
workflow$data
workflow$data %>% nrow()
workflow$pre$mold %>% nrow()
workflow$pre$mold %>% ncol()
  workflow <- .fit_model(workflow, control)
action_model <- workflow[["fit"]][["actions"]][["model"]]
action_model
add_model
action_model <- workflow[["fit"]][["actions"]][["model"]]
  mold <- workflow$pre$mold
mold
mold
add_model
new_action_model
add_formula
install.packages("workflows")
wflow
wflow$pre$actions$formula
wflow$fit$actions$model
fit(workflow, mtcars)
fit(workflow, mtcars)
fit(workflow, mtcars)
fit(workflow, mtcars)
worflow$pre$actions[[2]]
  action_model <- workflow[["fit"]][["actions"]][["model"]]
action_model
fit_from_xy
fit_from_xy
object
objec
bject
bject
object
control_workflow()
control_workflow()
control <- control_workflow()
  mold <- workflow$pre$mold
mold
  action_model <- workflow[["fit"]][["actions"]][["model"]]
  mold <- workflow$pre$mold
mold
mold %>% nrow()
workflow
object <- workflow
  workflow <- .fit_pre(workflow)
workflow$data %>% nrow()
workflow$pre$mold %>% nrow()
  action_model <- workflow[["fit"]][["actions"]][["model"]]
object <- action_model
object
workflow
control
  mold <- workflow$pre$mold
mold
  workflow <- .fit_pre(workflow)
workflow$pre$mold
  workflow <- .fit_model(workflow, control)
  workflow <- .fit_pre(workflow)
object
object$data
object$pre$mold
object$pre$mold %>% nrow()
  workflow <- .fit_pre(workflow)
wflow
wflow <- workflow
n
i <- 1
action
object <- action
wflow
object
wflow <- object
i <- 1
action
wflow
wflow
object
identical(object, wflow)
workflow <- wflow
object <- action
rlang::exec(
        # function body
        object[[1]],
        # function args
        data = workflow$pre$mold,
        !!!object[[2]]
      )
    training(
      rlang::exec(
        # function body
        object[[1]],
        # function args
        data = workflow$pre$mold,
        !!!object[[2]]
      )
    )
  workflow$pre$mold <-
    training(
      rlang::exec(
        # function body
        object[[1]],
        # function args
        data = workflow$pre$mold,
        !!!object[[2]]
      )
    )
wflow
i <- 1
action
wflow
wflow$pre$mold
i <- 2
action
object <- action
hardhat::mold(formula,
                                     workflow$pre$mold,
                                     blueprint = blueprint)
  workflow <- .fit_pre(workflow)

workflow
workflow$data
workflow$pre$mold
workflow$pre$mold
workflow
  workflow <- .fit_model(workflow, control)
  workflow <- .fit_model(workflow, control_workflow())
workflow
has_raw_data
res$fit$fit
res$fit$fit$fit
res$fit$fit$fit
nobs(res$fit$fit$fit)
tst <- essurvey::import_country("United Kingdom", 9)
set_email("cimentadaj@gmail.com")
tst <- essurvey::import_country("United Kingdom", 9)
tst
tst <- essurvey::import_country("United Kingdom", 7)
tst
tst$agea
object
res
res
x <- res
x
x %>% remove_split()
res2
res2
res2$data
res2$pre$mold
res2$pre$actions
res2$fit
rlang::last_error()
res
rlang::last_error()
object
object$pre$actions
res$pre$actions$split
object <- res$pre$actions$split
object[[1]]
object[[2]]
workflow <- res
      rlang::exec(
        # function body
        object[[1]],
        # function args
        !!!object[[2]],
        data = workflow$pre$mold
      )
!!!object[[2]]
workflow$pre$mold
class(object[[2]])
      rlang::exec(
        # function body
        object[[1]],
        # function args
        object[[2]],
        data = workflow$pre$mold
      )
      rlang::exec(
        # function body
        object[[1]],
        # function args
        object[[2]],
        data = workflow$pre$mold
      )
rlang::exec(
        # function body
        object[[1]],
        # function args
        object[[2]],
        data = workflow$pre$mold
      )
      rlang::exec(
        # function body
        object[[1]],
        # function args
        !!!object[[2]],
        data = workflow$pre$mold
      )
object[[2]]
as.list(object[[2]])
      rlang::exec(
        # function body
        object[[1]],
        # function args
        !!!as.list(object[[2]]),
        data = workflow$pre$mold
      )
    training(
      rlang::exec(
        # function body
        object[[1]],
        # function args
        !!!as.list(object[[2]]),
        data = workflow$pre$mold
      )
    )
object[[2]]
exec(mean, list(x = 1:10))
exec("mean", list(x = 1:10))
exec("mean", !!!list(x = 1:10))
exec(mean, !!!list(x = 1:10))
exec(mean, !!!list(x = quo(1:10)))
exec(mean, lapply(list(x = quo(1:10)), `!!`))
exec(mean, lapply(list(x = quo(1:10)), `!!!`))
exec(mean, list(x = quo(1:10)))
list(x = quo(1:10))
args <- list(x = quo(1:10))
exec(mean, !!!args)
args
quo(1:10)
eval_tidy(quo(1:10))
args
fit
res
workflow
workflow$pre$actions
workflow
add_recipe
wflow
workflow
workflow$data
workflow$fit
workflow$pre
workflow()
workflow() %>% add_recipe(recipe(mpg ~ cyl, data = mtcars))
workflow() %>% add_recipe(recipe(mpg ~ cyl, data = mtcars))
x <- workflow()
recipe <- recipe(mpg ~ cyl, data = mtcars)
action
add_split
add_action
add_action_impl
add_split
workflow(mtcars) %>% add_formula(mpg ~ cyl) %>% add_model(linear_reg(), "lm")
workflow(mtcars) %>% add_formula(mpg ~ cyl) %>% add_model(set_engine(linear_reg(), "lm"))
x <- workflow(mtcars) %>% add_formula(mpg ~ cyl) %>% add_model(set_engine(linear_reg(), "lm"))
x
x %>% add_split(initial_split)
x %>% add_split(rsample::initial_split)
x %>% add_split(rsample::initial_split, prop = 0.9)
x %>% add_split(rsample::initial_split, prop = 0.9) %>% fit()
x %>% add_split(rsample::initial_split, prop = 0.9)
workflow
x <- workflow_removed_formula
x <- workflow_with_formula
add_split
x <- pull_workflow_fit(result)$fit
x
str(x)
x
x$model
fit
fit.workflow
fit_from_formula
workflow$pre$mold
workflow_with_model
workflow_with_model$pre$mold
workflow_removed_model$pre$mold
fit_workflow
fit_workflow$fit$fit$fit
nobs(fit_workflow$fit$fit$fit)
initial_split
fit.workflow
.fit_pre
.fit_model
x <- workflow_no_intercept
.fit_pre(x)
.fit_pre(x)
.fit_model(.fit_pre(x))
.fit_model(.fit_pre(x), control_workflow())
x <- .fit_pre(x)
x
x$pre$mold
control_workflow()
control <- control_workflow()
x <- object
object <- x
workflow <- x
mold <- workflow$pre$mold
mold
object
object <- x$fit
object
object <- x$fit$actions
object
object <- x$fit$actions$model
mold <- workflow$pre$mold
mold
object
fit_from_formula
?fitmodel_spec
?fit.model_spec
mold
fit_workflow
fit_workflow
fit_workflow
object <- fit_workflow
workflow
fit_workflow
workflow <- fit_workflow
workflow
blueprint <- workflow$pre$mold$blueprint
blueprint
workflow$pre$actions$recipe
workflow$pre$actions$split
predict.default
workflows::dots_definitions
?tune::finalize_recipe
usethis::use_build_ignore(c("LICENSE.md", "README.Rmd", "_pkgdown.yml", "codecov.yml", "cran-comments.md" "prototype.Rmd","prototype.html", "test.R", "workflows.Rproj"))
usethis::use_build_ignore(c("LICENSE.md", "README.Rmd", "_pkgdown.yml", "codecov.yml", "cran-comments.md","prototype.Rmd","prototype.html", "test.R", "workflows.Rproj"))
install.packages("workflows")
tflow
tst <-
  tflow %>%
  fit()
tflow
tst
rec_fo
rec_form
tune
usethis::use_package("glmnet", type = "Suggests")
