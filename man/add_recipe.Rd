% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pre-action-recipe.R
\name{add_recipe}
\alias{add_recipe}
\alias{remove_recipe}
\alias{update_recipe}
\title{Add a recipe to a workflow}
\usage{
add_recipe(x, .f, ..., blueprint = NULL)

remove_recipe(x)

update_recipe(x, .f, ..., blueprint = NULL)
}
\arguments{
\item{x}{A workflow}

\item{.f}{A function or a formula

If a \emph{function}, it is used as is.

If a \emph{formula}, e.g. ‘~ recipe(mpg ~ cyl, data = .x)’, it is converted to a
function. The only the first argument in the recipe function is passed
to the data. Other arguments will be ignored. If a \emph{formula}, the argument
name can be either \code{.} or \code{.x}. See the examples section for more details.}

\item{...}{Not used.}

\item{blueprint}{A hardhat blueprint used for fine tuning the preprocessing.
If \code{NULL}, \code{\link[hardhat:default_recipe_blueprint]{hardhat::default_recipe_blueprint()}} is used.}
}
\value{
\code{x}, updated with either a new or removed recipe function.
}
\description{
\itemize{
\item \code{add_recipe()} specifies the type of recipe used in the analysis. It
accepts a function \code{.f} that will be applied to the data. Only
functions which return a \code{recipe} object will be allowed. See
package \code{\link[recipes]{recipes}} for how to create a recipe.
\item \code{remove_recipe()} removes the recipe function from the workflow. Note
that it keeps other preprocessing steps such as the split and resample.
\item \code{update_recipe()} first removes the recipe function, then adds the new
recipe function. Any model that has already been fit based on this
recipe will need to be refit.
}
}
\details{
To fit a workflow, one of \code{add_formula()} or \code{add_recipe()} \emph{must} be
specified, but not both.
}
\examples{
library(recipes)
library(parsnip)

recipe_fun <- function(.x) {
  recipe(mpg ~ ., data = .x) \%>\%
   step_center(all_predictors()) \%>\%
   step_scale(all_predictors())
}

# Specify an already created recipe function
wflow <-
 mtcars \%>\%
 workflow() \%>\%
 add_recipe(recipe_fun) \%>\%
 add_model(set_engine(linear_reg(), "lm"))

# Fit the model
wflow \%>\%
 fit()

# Remove the old recipe, specify one on the fly and fit again
wflow \%>\%
 update_recipe(~ recipe(mpg ~ cyl, data = .) \%>\% step_log(cyl, base = 10)) \%>\%
 fit()

# Note how the function argument can be either `.` or `.x`
wflow \%>\%
 update_recipe(~ {
  .x \%>\% 
   recipe(mpg ~ cyl + am) \%>\%
    step_log(cyl, base = 10) \%>\%
    step_mutate(am = factor(am)) \%>\%
    step_dummy(am)
 }) \%>\%
 fit()

}
