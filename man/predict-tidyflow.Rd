% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/predict.R
\name{predict-tidyflow}
\alias{predict-tidyflow}
\alias{predict.tidyflow}
\alias{predict_training}
\alias{predict_testing}
\title{Predict from a tidyflow}
\usage{
\method{predict}{tidyflow}(object, new_data, type = NULL, opts = list(), ...)

predict_training(object, type = NULL, opts = list(), ...)

predict_testing(object, type = NULL, opts = list(), ...)
}
\arguments{
\item{object}{A tidyflow that has been fit by \code{\link[=fit.tidyflow]{fit.tidyflow()}}}

\item{new_data}{A data frame containing the new predictors to preprocess
and predict on. Usually, this would be extracted from the tidyflow
with \code{\link{pull_tflow_testing}} with \code{prep = TRUE} or
\code{\link{pull_tflow_training}} with \code{prep = TRUE}.}

\item{type}{A single character value or \code{NULL}. Possible values
are "numeric", "class", "prob", "conf_int", "pred_int", "quantile",
or "raw". When \code{NULL}, \code{predict()} will choose an appropriate value
based on the model's mode.}

\item{opts}{A list of optional arguments to the underlying
predict function that will be used when \code{type = "raw"}. The
list should not include options for the model object or the
new data being predicted.}

\item{...}{Arguments to the underlying model's prediction
function cannot be passed here (see \code{opts}). There are some
\code{parsnip} related options that can be passed, depending on the
value of \code{type}. Possible arguments are:
\itemize{
\item \code{level}: for \code{type}s of "conf_int" and "pred_int" this
is the parameter for the tail area of the intervals
(e.g. confidence level for confidence intervals).
Default value is 0.95.
\item \code{std_error}: add the standard error of fit or
prediction for \code{type}s of "conf_int" and "pred_int".
Default value is \code{FALSE}.
\item \code{quantile}: the quantile(s) for quantile regression
(not implemented yet)
\item \code{time}: the time(s) for hazard probability estimates
(not implemented yet)
}}
}
\value{
A data frame of model predictions, with as many rows as \code{new_data} has.
}
\description{
This is the \code{predict()} method for a fit tidyflow object. In addition,
when a split is specifid, \code{predict_training} and \code{predict_testing}
automatically predict and apply any preprocessing to the training
and testing data.
}
\examples{
library(parsnip)
library(recipes)
library(rsample)

model <- linear_reg()
model <- set_engine(model, "lm")

tflow <- tidyflow(mtcars)
tflow <- plug_split(tflow, initial_split)
tflow <- plug_model(tflow, model)

rcp <- ~ step_log(recipe(mpg ~ cyl + disp, .), disp)

tflow <- plug_recipe(tflow, rcp)

tflow <- fit(tflow)

# This will automatically `bake()` the recipe on `new_data`,
# applying the log step to `disp`, and then fit the regression.
predict(tflow, new_data = pull_tflow_testing(tflow))

# More automatic
predict_testing(tflow)

predict_training(tflow)

}
