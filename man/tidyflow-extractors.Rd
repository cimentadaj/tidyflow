% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pull.R
\name{tidyflow-extractors}
\alias{tidyflow-extractors}
\alias{pull_tflow_rawdata}
\alias{pull_tflow_split}
\alias{pull_tflow_training}
\alias{pull_tflow_testing}
\alias{pull_tflow_resample}
\alias{pull_tflow_grid}
\alias{pull_tflow_preprocessor}
\alias{pull_tflow_prepped_recipe}
\alias{pull_tflow_mold}
\alias{pull_tflow_spec}
\alias{pull_tflow_fit}
\alias{pull_tflow_fit_tuning}
\title{Extract elements of a tidyflow}
\usage{
pull_tflow_rawdata(x)

pull_tflow_split(x)

pull_tflow_training(x, prep = FALSE)

pull_tflow_testing(x, prep = FALSE)

pull_tflow_resample(x)

pull_tflow_grid(x)

pull_tflow_preprocessor(x)

pull_tflow_prepped_recipe(x)

pull_tflow_mold(x)

pull_tflow_spec(x)

pull_tflow_fit(x)

pull_tflow_fit_tuning(x)
}
\arguments{
\item{x}{A tidyflow}

\item{prep}{A logical stating whether the training/testing data should be
returned with the preprocessing step applied (either the formula or the recipe
preprocessing). By default it is set to \code{FALSE}.}
}
\value{
The extracted value from the tidyflow, \code{x}, as described in the description
section.
}
\description{
These functions extract various elements from a tidyflow object. If they do
not exist yet, an error is thrown. \strong{Most of these steps can only be executed
after the \code{tidyflow} has been fitted}.
\itemize{
\item \code{pull_tflow_rawdata()} returns the complete raw/untrained data.
\item \code{pull_tflow_split()} returns the split object from the function specified
in \code{\link{plug_split}}.
\item \code{pull_tflow_training()} turns the training data from the split. Only
works when a split has been specified with \code{\link{plug_split}}.
If \code{prep = TRUE}, the preprocessing (either recipe or formula)
is applied to the data.
\item \code{pull_tflow_testing()} returns the testing data from the split. Only
works when a split has been specified with \code{\link{plug_split}}
If \code{prep = TRUE}, the preprocessing (either recipe or formula)
is applied to the data.
\item \code{pull_tflow_preprocessor()} returns either the formula or recipe used
for preprocessing. Note that in the case of the recipe it returns the
function that should be applied to the data to apply the recipe.
\code{\link{pull_tflow_prepped_recipe}} returns the recipe already applied
to the training data.
\item \code{pull_tflow_resample()} returns the resample object from the function
specified in \code{\link{plug_resample}}. The resample object does not
have the preprocessor applied (either formula or recipe).
\item \code{pull_tflow_grid()} returns the grid data frame from which the tuning
parameter was made.
\item \code{pull_tflow_prepped_recipe()} returns the prepped recipe. It is
extracted from the mold object returned from \code{pull_tflow_mold()}.
\item \code{pull_tflow_mold()} returns the preprocessed "mold" object returned
from \code{\link[hardhat:mold]{hardhat::mold()}}. It contains information about the preprocessing,
including either the prepped recipe or the formula terms object.
\item \code{pull_tflow_spec()} returns the parsnip model specification.
\item \code{pull_tflow_fit()} returns the parsnip model fit.
\item \code{pull_tflow_fit_tuning()} returns the resample result from model tuning.
}
}
\examples{
library(parsnip)
library(recipes)
library(rsample)

model <- set_engine(linear_reg(), "lm")

recipe <- ~ recipe(.x, mpg ~ cyl + disp) \%>\% step_log(disp)

tflow <-
 mtcars \%>\%
 tidyflow() \%>\%
 plug_split(initial_split) \%>\%
 plug_model(model)

recipe_tflow <- plug_recipe(tflow, recipe)
formula_tflow <- plug_formula(tflow, mpg ~ cyl + log(disp))

fit_recipe_tflow <- fit(recipe_tflow)
fit_formula_tflow <- fit(formula_tflow)

pull_tflow_rawdata(fit_recipe_tflow)
pull_tflow_rawdata(fit_formula_tflow)

# The preprocessor is either the recipe function or a formula
pull_tflow_preprocessor(fit(recipe_tflow))
pull_tflow_preprocessor(fit(formula_tflow))

# The `spec` is the parsnip spec before it has been fit.
# The `fit` is the fit parsnip model.
pull_tflow_spec(fit_formula_tflow)
pull_tflow_fit(fit_formula_tflow)

# The mold is returned from `hardhat::mold()`, and contains the
# predictors, outcomes, and information about the preprocessing
# for use on new data at `predict()` time.
pull_tflow_mold(fit_recipe_tflow)

# The raw training and testing
pull_tflow_training(fit_recipe_tflow)
pull_tflow_testing(fit_recipe_tflow)

# Or with the preprocessor (recipe/formula) applied
pull_tflow_training(fit_recipe_tflow, prep = TRUE)
pull_tflow_testing(fit_recipe_tflow, prep = TRUE)

# A useful shortcut is to extract the prepped recipe from the tidyflow
pull_tflow_prepped_recipe(fit_recipe_tflow)

# That is identical to
identical(
  pull_tflow_mold(fit_recipe_tflow)$blueprint$recipe,
  pull_tflow_prepped_recipe(fit_recipe_tflow)
)

}
