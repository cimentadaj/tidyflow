% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/predict.R
\name{predict-workflow}
\alias{predict-workflow}
\alias{predict.workflow}
\title{Predict from a workflow}
\usage{
\method{predict}{workflow}(object, new_data, type = NULL, opts = list(), ...)
}
\arguments{
\item{object}{A workflow that has been fit by \code{\link[=fit.workflow]{fit.workflow()}}}

\item{new_data}{A data frame containing the new predictors to preprocess
and predict on. Usually, this would be extracted from the workflow
with \code{\link{pull_workflow_testing}}}

\item{type}{A single character value or \code{NULL}. Possible values
are "numeric", "class", "prob", "conf_int", "pred_int", "quantile",
or "raw". When \code{NULL}, \code{predict()} will choose an appropriate value
based on the model's mode.}

\item{opts}{A list of optional arguments to the underlying
predict function that will be used when \code{type = "raw"}. The
list should not include options for the model object or the
new data being predicted.}

\item{...}{Arguments to the underlying model's prediction
function cannot be passed here (see \code{opts}). There are some
\code{parsnip} related options that can be passed, depending on the
value of \code{type}. Possible arguments are:
\itemize{
\item \code{level}: for \code{type}s of "conf_int" and "pred_int" this
is the parameter for the tail area of the intervals
(e.g. confidence level for confidence intervals).
Default value is 0.95.
\item \code{std_error}: add the standard error of fit or
prediction for \code{type}s of "conf_int" and "pred_int".
Default value is \code{FALSE}.
\item \code{quantile}: the quantile(s) for quantile regression
(not implemented yet)
\item \code{time}: the time(s) for hazard probability estimates
(not implemented yet)
}}
}
\value{
A data frame of model predictions, with as many rows as \code{new_data} has,
if \code{new_data} was specified, or a data frame of model predictions with
as many rows as the testing data extracted with the split specification.
}
\description{
This is the \code{predict()} method for a fit workflow object. The nice thing
about predicting from a workflow is that it will:
\itemize{
\item Preprocess \code{new_data} using the preprocessing method specified when the
workflow was created and fit. This is accomplished using \link[=forge]{ hardhat::forge()}, which will apply any formula preprocessing or call
\code{\link[recipes:bake]{recipes::bake()}} if a recipe was supplied. For safety reasons,
if a split was specified, the user should always use
\code{\link{pull_workflow_testing}} to extract the raw testing data
from the workflow and pass it to \code{new_data}.
\item Call \code{\link[parsnip:predict.model_fit]{parsnip::predict.model_fit()}} for you using the underlying fit
parsnip model.
}
}
\examples{
library(parsnip)
library(recipes)
library(rsample)

model <- linear_reg()
model <- set_engine(model, "lm")

wflow <- workflow(mtcars)
wflow <- add_split(wflow, initial_split)
wflow <- add_model(wflow, model)

rcp <- ~ step_log(recipe(mpg ~ cyl + disp, .), disp)

wflow <- add_recipe(wflow, rcp)

wflow <- fit(wflow)

# This will automatically `bake()` the recipe on `new_data`,
# applying the log step to `disp`, and then fit the regression.
predict(wflow, new_data = pull_workflow_testing(wflow))

}
